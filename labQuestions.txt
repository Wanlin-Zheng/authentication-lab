What authentication scheme is used by default in Django Rest Framework's browsable API? How is this managed?
The authentication schemes are always defined as a list of classes. REST framework will attempt to authenticate with each class in the list, and will set request.user and request.auth using the return value of the first class that successfully authenticates.

If no class authenticates, request.user will be set to an instance of django.contrib.auth.models.AnonymousUser, and request.auth will be set to None.

The value of request.user and request.auth for unauthenticated requests can be modified using the UNAUTHENTICATED_USER and UNAUTHENTICATED_TOKEN settings.
from : https://www.django-rest-framework.org/api-guide/authentication/


Question 2: What authentication scheme is used by httpie when querying with the -a or --auth option flag?
The currently supported authentication schemes are Basic and Digest
-a and --auth Pass either a username:password pair or a token as the argument. If the selected authenticated method requires username/password combination and if you only specify a username (-a username), youâ€™ll be prompted for the password before the request is sent. To send an empty password, pass username:. The username:password@hostname URL syntax is supported as well 

from :https://httpie.io/docs/cli/authentication


Question 3: What is the difference between Session Authentication and Token Authentication? How is Token Authentication an improvement over Basic Authentication?

A session is a small file, most likely in JSON format, that stores information about the user, such as a unique ID, time of login and expirations, and so on. It is generated and stored on the server so that the server can keep track of the user requests.
A token is an authorization file that cannot be tampered with. It is generated by the server using a secret key, sent to and stored by the user in their local storage. Like in the case of cookies, the user sends this token to the server with every new request, so that the server can verify its signature and authorize the requests. 
from : https://www.geeksforgeeks.org/session-vs-token-based-authentication/


Question 4: Provide a high level summary of what happens during an OAuth2 authentication flow. For instance: bitbucket.org > Log In > Log in with Google. What happens when I click "Log in with Google"?
User authenticates using one of the configured login options, and may see a consent prompt listing the permissions Auth0 will give to the application. Auth0 Authorization Server redirects user back to application with single-use authorization code. Auth0's SDK sends authorization code, application's client ID, and application's credentials, such as client secret or Private Key JWT, to Auth0 Authorization Server. Auth0 Authorization Server verifies authorization code, application's client ID, and application's credentials.
 from https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow